stages:
  - setup
  - build
  - test
  - publish

variables:
  DATA_REPLAY_TAG: data-cache-storage

  GIT_DEPTH: 20
  GIT_STRATEGY: clone
  GIT_SUBMODULE_STRATEGY: "recursive"
  GIT_SUBMODULE_DEPTH: 1
  GIT_SUBMODULE_UPDATE_FLAGS: --jobs 4

  CI_DEBUG_SERVICES: "true"

  # Variables required by Common CI jobs
  CI_COMMON_JOB_VERSION: "a3e97d90268154fae7933ea98e50e3c1c7c72d43"
  DOCKER_BUILDER_TAG: "$CI_COMMON_JOB_VERSION"
  DOCKER_DIND_TAG: "$CI_COMMON_JOB_VERSION"
  IMAGE_REMOVER_TAG: "$CI_COMMON_JOB_VERSION"
  TOX_IMAGE_TAG: "$CI_COMMON_JOB_VERSION"
  JQ_IMAGE_TAG: "$CI_COMMON_JOB_VERSION"
  # uses registry.gitlab.syncad.com/hive/haf/ci-base-image:ubuntu22.04-8
  BUILDER_IMAGE_TAG: "@sha256:834e666ee84fb78d66a695b274b87f75535f96fda98e51726a23eab60812813b"
  BUILDER_IMAGE_PATH: "registry.gitlab.syncad.com/hive/haf/ci-base-image${BUILDER_IMAGE_TAG}"

  APP_PORT: 6543

include:
  - local: scripts/ci-helpers/includes.gitlab-ci.yml

######## Templates ########

.prepare_hafah_image:
  extends: .docker_image_builder_job
  stage: build
  variables:
    HAFAH_IMAGE_TAG: ""
    HAFAH_IMAGE_NAME: $CI_REGISTRY_IMAGE/instance:$HAFAH_IMAGE_TAG
    USE_POSTGREST: 0
    SOURCE_DIR: $CI_PROJECT_DIR
    REGISTRY: $CI_REGISTRY_IMAGE
  script:
    - |
      echo $HAFAH_IMAGE_NAME
      echo $SOURCE_DIR
      scripts/ci-helpers/build_instance.sh
      docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
      docker push "$HAFAH_IMAGE_NAME"
      echo "HAFAH_IMAGE_NAME=$HAFAH_IMAGE_NAME" > docker_image_name.env
      if [[ -n "$CI_COMMIT_TAG" ]]; then
        docker tag "$HAFAH_IMAGE_NAME" "$CI_REGISTRY_IMAGE/instance:$CI_COMMIT_TAG"
        docker push "$CI_REGISTRY_IMAGE/instance:$CI_COMMIT_TAG"
      fi
  artifacts:
    reports:
      dotenv: docker_image_name.env
  tags:
    - public-runner-docker
    - hived-for-tests

.hfm-only-service:
  services:
    - name: $HAF_IMAGE_NAME
      alias: hfm-only-instance
      variables:
        # Allow access from any network to eliminate CI IP addressing problems when hfm runs as service
        PG_ACCESS: |
                "host    all              haf_admin        0.0.0.0/0    trust"
                "host    all              hived            0.0.0.0/0    trust"
                "host    all              hafah_user       0.0.0.0/0    trust"
                "host    all              all              0.0.0.0/0    scram-sha-256"
      command: ["--execute-maintenance-script=${HAF_SOURCE_DIR}/scripts/maintenance-scripts/sleep_infinity.sh"]

.hafah_pytest_fuctional_tests_base:
  extends: .pytest_based_template
  stage: test
  needs:
    - job: prepare_haf_image_testnet
      artifacts: true
    - job: prepare_postgrest_hafah_image
      artifacts: true
  services:
    - !reference [.hfm-only-service, services]
    - name: ${HAF_APP_IMAGE}
      alias: app-setup
      variables:
        # intentionally use setup way chosed in haf_api_node compose scripts
        POSTGRES_URL: "postgresql://haf_admin@hfm-only-instance/haf_block_log"
      command: ["install_app"]
      entrypoint:
        - '/bin/bash'
        - '-c'
        - |
          set -xeuo pipefail
          echo "Attempting to perform application setup..."
          # pass control to the default image entrypoint
          "./docker_entrypoint.sh" "$@"
          echo "Application setup completed, starting to listed app port to satisfy Gitlab health checker..."
          # Once setup completed, just listen on container/app port to satisfy GitlabCI HealthChecker
          nc -v -l -p $(echo "${HAF_APP_PORT}")
        # arg $0 should be explicitly passed when using 'bash -c' entrypoints
        - '/bin/bash'
    - name: ${HAF_APP_IMAGE}
      alias: app
      command: ["--postgres-url=postgresql://hafah_user@hfm-only-instance/haf_block_log"]
      entrypoint:
        - '/bin/bash'
        - '-c'
        - |
          set -xeuo pipefail
          # since Gitlab services startup order is undefined, we need to wait for app setup completion
          "/home/hafah_user/app/scripts/wait_for_setup_completed.sh" "$@"
          echo "Application setup finished - continue app-service spawn..."
          # pass control to the default image entrypoint
          /home/hafah_user/docker_entrypoint.sh "$@"
        # arg $0 should be explicitly passed when using 'bash -c' entrypoints
        - '/bin/bash'
  variables:
    JUNIT_REPORT: tests/integration/functional/report.xml
    PYTEST_BASED_IMAGE_NAME: $BUILDER_IMAGE_PATH
    POETRY_INSTALL_ROOT_DIR: $CI_PROJECT_DIR/tests/integration/hafah-local-tools
    BINARY_CACHE_PATH: "$CI_PROJECT_DIR/haf-testnet-binaries"
    HIVED_PATH: "$BINARY_CACHE_PATH/hived"
    COMPRESS_BLOCK_LOG_PATH: "$BINARY_CACHE_PATH/compress_block_log"
    GET_DEV_KEY_PATH: "$BINARY_CACHE_PATH/get_dev_key"
    CLI_WALLET_PATH: "$BINARY_CACHE_PATH/cli_wallet"
    DB_NAME: haf_block_log
    DB_URL: "postgresql://haf_admin@hfm-only-instance:5432/$DB_NAME"
    HAF_APP_IMAGE: $HAFAH_IMAGE_NAME
    HAF_APP_PORT: ${APP_PORT}
    DIRECT_CALLS: 0
    POSTGRES_URL: $DB_URL
  script:
    - echo "HAfAH image name $HAF_APP_IMAGE"
    - echo "HAF image name $HAF_IMAGE_NAME"

    # run tests
    - cd $CI_PROJECT_DIR/tests/integration/functional
    - pytest --junitxml report.xml --postgrest-hafah-adress=app:$APP_PORT --postgres-db-url=$DB_URL -m $PYTEST_MARK
  tags:
    - public-runner-docker

######## End templates ########

######## Setup ########

environment-debug-job:
  stage: setup
  image: "$BUILDER_IMAGE_PATH"
  script:
    - |
      echo "Current environment:"
      set
  tags:
    - public-runner-docker

verify_poetry_lock_sanity:
  extends: .verify_poetry_lock_sanity_template
  stage: setup
  variables:
    PYPROJECT_DIR: "$CI_PROJECT_DIR/tests/integration/hafah-local-tools"
  tags:
    - public-runner-docker

determine-runner-tag:
  extends: .determine-runner-tag-template
  stage: setup

######## End setup ########

######## Build ########

prepare_hived_image:
  extends: .prepare_hived_image
  stage: build
  variables:
    SUBMODULE_DIR: "$CI_PROJECT_DIR/haf/hive"
    REGISTRY_USER: "$HIVED_CI_IMGBUILDER_USER"
    REGISTRY_PASS: $HIVED_CI_IMGBUILDER_PASSWORD
  tags:
    - public-runner-docker
    - hived-for-tests

prepare_haf_image:
  extends: .prepare_haf_image
  stage: build
  variables:
    SUBMODULE_DIR: "$CI_PROJECT_DIR/haf"
    REGISTRY_USER: "$CI_IMG_BUILDER_USER"
    REGISTRY_PASS: $CI_IMG_BUILDER_PASSWORD
  tags:
    - public-runner-docker
    - hived-for-tests

build_setup_docker_image:
  extends: .docker_image_builder_job
  stage: build
  tags:
    - public-runner-docker
  script:
    - "echo \"TRUNCATE TABLE hafah_python.version; INSERT INTO hafah_python.version(git_hash) VALUES ('$CI_COMMIT_SHA');\" > set_version_in_sql.pgsql"
    - "docker build --tag=$CI_REGISTRY_IMAGE/setup:$CI_COMMIT_SHORT_SHA -f Dockerfile.setup ."
    - "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    - "docker push $CI_REGISTRY_IMAGE/setup:$CI_COMMIT_SHORT_SHA"

prepare_haf_image_testnet:
  extends: .prepare_haf_image
  stage: build
  variables:
    SUBMODULE_DIR: "$CI_PROJECT_DIR/haf"
    REGISTRY_USER: "$CI_IMG_BUILDER_USER"
    REGISTRY_PASS: $CI_IMG_BUILDER_PASSWORD
    HIVE_NETWORK_TYPE: testnet
    BINARY_CACHE_PATH: "$CI_PROJECT_DIR/haf-testnet-binaries"
  tags:
    - public-runner-docker
    - hived-for-tests

prepare_postgrest_hafah_image:
  extends: .prepare_hafah_image
  variables:
    HAFAH_IMAGE_TAG: $CI_COMMIT_SHORT_SHA
    USE_POSTGREST: 1 

######## End build ########

######## Test ########

dynamic-tag-pipeline-trigger:
  extends: .dynamic-tag-pipeline-trigger-template
  stage: test
  needs:
    - job: determine-runner-tag
    - job: prepare_hived_image
      artifacts: true
    - job: prepare_haf_image
      artifacts: true
    - job: prepare_postgrest_hafah_image
      artifacts: true
  trigger:
    strategy: depend
    forward:
      yaml_variables: true
      pipeline_variables: true
    include:
      - local: scripts/ci-helpers/dynamic-tag-pipeline.gitlab-ci.yml

dynamic-pipeline-details-collector:
  extends: .dynamic-pipeline-details-collector-template
  stage: test
  needs:
    - job: dynamic-tag-pipeline-trigger
  tags:
    - public-runner-docker

dynamic-pipeline-test-results-collector:
  extends: .dynamic-pipeline-test-results-collector-template
  stage: test
  needs:
    - job: dynamic-pipeline-details-collector
  parallel:
    matrix:
      - CHILD_PIPELINE_JOB: [ "postgrest_account_history_benchmark_tests",
                              "postgrest_block_api_benchmark_tests",
                              "postgrest_comparison_tests",
                              "postgrest_pattern_tests",
                              "new_style_postgrest_pattern_tests" ]
  tags:
    - public-runner-docker

hafah_pytest_fuctional_tests_part1:
  extends: .hafah_pytest_fuctional_tests_base
  variables:
    PYTEST_MARK: "enum_virtual_ops_and_get_ops_in_block"

hafah_pytest_fuctional_tests_part2:
  extends: .hafah_pytest_fuctional_tests_base
  variables:
    PYTEST_MARK: "get_account_history_and_get_transaction"

######## End test ########

######## Publish ########

build_and_publish_image:
  stage: publish
  extends: .publish_docker_image_template
  before_script:
    - !reference [.publish_docker_image_template, before_script]
  script:
    - scripts/ci-helpers/build_and_publish_instance.sh
  tags:
    - public-runner-docker
    - hived-for-tests

######## End publish ########
