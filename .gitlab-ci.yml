stages:
  - build_and_test_phase_1
  - build_and_test_phase_2
  - deploy
  - cleanup

variables:
  CTEST_NUMBER_OF_JOBS: 4
  GIT_DEPTH: 20
  GIT_SUBMODULE_STRATEGY: recursive
  FF_ENABLE_JOB_CLEANUP: 1
  GIT_STRATEGY: clone
  # uses registry.gitlab.syncad.com/hive/haf/ci-base-image:ubuntu22.04-2
  BUILDER_IMAGE_TAG: "@sha256:e7ef9044f9da03653d349d01e51e17c406550ef97f921a1552e7c21a8968b190"
  CI_DEBUG_SERVICES: "true"
  SETUP_SCRIPTS_PATH: "$CI_PROJECT_DIR/scripts"
  TEST_TOOLS_NODE_DEFAULT_WAIT_FOR_LIVE_TIMEOUT: 60
  DATA_CACHE_MAINNET: /cache/replay_data_haf_mainnet_${CI_PIPELINE_ID}
  BLOCK_LOG_SOURCE_DIR_5M: /blockchain/block_log_5m


include: '/scripts/ci-helpers/prepare_data_image_job.yml'


.hive_fork_manager_build:
  stage: build_and_test_phase_1
  image: "$CI_REGISTRY_IMAGE/ci-base-image$BUILDER_IMAGE_TAG"
  script:
    - sudo -n chown -Rc haf_admin "$CI_PROJECT_DIR"
    - $SETUP_SCRIPTS_PATH/build.sh --cmake-arg="-DHIVE_LINT=OFF" --cmake-arg="-DBUILD_HIVE_TESTNET=$BUILD_HIVE_TESTNET" --haf-source-dir="$CI_PROJECT_DIR" --haf-binaries-dir="$CI_PROJECT_DIR/$CI_JOB_NAME/build" extension.hive_fork_manager
    - sudo $SETUP_SCRIPTS_PATH/setup_postgres.sh --haf-admin-account=haf_admin --haf-binaries-dir="$CI_PROJECT_DIR/$CI_JOB_NAME/build"
    - cd "$CI_PROJECT_DIR/$CI_JOB_NAME/build" && ctest -j${CTEST_NUMBER_OF_JOBS} --output-on-failure  -R test.functional.hive_fork_manager.*
    - cd "$CI_PROJECT_DIR/$CI_JOB_NAME/build" && ctest --output-on-failure  -R test.unit.*
  artifacts:
    paths:
    - "$CI_JOB_NAME"
    expire_in: 6 hours
  interruptible: true
  tags:
    - public-runner-docker
    - hived

hive_fork_manager:
  variables:
    BUILD_HIVE_TESTNET: "OFF"
  extends: .hive_fork_manager_build

hive_fork_manager_testnet:
  variables:
    BUILD_HIVE_TESTNET: "ON"
  extends: .hive_fork_manager_build

.hived_build:
  stage: build_and_test_phase_1
  image: "$CI_REGISTRY_IMAGE/ci-base-image$BUILDER_IMAGE_TAG"
  script:
    - sudo -n chown -Rc haf_admin "$CI_PROJECT_DIR"
    - $SETUP_SCRIPTS_PATH/build.sh --cmake-arg="-DHIVE_LINT=OFF" --haf-source-dir="$CI_PROJECT_DIR" --haf-binaries-dir="$CI_PROJECT_DIR/$CI_JOB_NAME/build" --cmake-arg="-DBUILD_HIVE_TESTNET=$BUILD_HIVE_TESTNET" $HIVE_TARGETS
    # check if sql_serializer compiles with hived
    - test -f "$CI_PROJECT_DIR/$CI_JOB_NAME/build/hive/libraries/plugins/sql_serializer/libsql_serializer_plugin.a"
    # check if sql_serializer plugin is included in hived plugins
    - cd "$CI_PROJECT_DIR/$CI_JOB_NAME/build/hive/programs/hived"
    - ./hived --help | grep psql-url
  artifacts:
    paths:
    - "$CI_JOB_NAME"
    expire_in: 6 hours
  tags:
    - public-runner-docker
    - hived

# job resonsible for hived build in mainnet config.
hived:
  variables:
    BUILD_HIVE_TESTNET: "OFF"
    HIVE_TARGETS: "hived compress_block_log"
  extends: .hived_build

hived_testnet:
  variables:
    BUILD_HIVE_TESTNET: "ON"
    HIVE_TARGETS: "hived cli_wallet get_dev_key compress_block_log"
  extends: .hived_build
  interruptible: true

.pytest_based:
  before_script:
    - export PATH="/home/haf_admin/.local/bin:$PATH"
    - curl -sSL https://install.python-poetry.org | python3 -  # install poetry in isolated environment
    - python3 -m venv venv/
    - . venv/bin/activate
    - (cd $CI_PROJECT_DIR/tests/integration/haf-local-tools && poetry install)

haf_system_tests:
  stage: build_and_test_phase_2
  extends: .pytest_based
  needs:
    - job: hive_fork_manager_testnet
      artifacts: true
    - job: hived_testnet
      artifacts: true
  image: "$CI_REGISTRY_IMAGE/ci-base-image$BUILDER_IMAGE_TAG"
  variables:
    HIVE_BUILD_ROOT_PATH: "$CI_PROJECT_DIR/hived_testnet/build/hive"
  script:
    # install hive_fork_manager extension built in previous stage
    - sudo $SETUP_SCRIPTS_PATH/setup_postgres.sh --haf-admin-account=haf_admin --haf-database-store="$CI_PROJECT_DIR/haf_database_store" --haf-binaries-dir="$CI_PROJECT_DIR/hive_fork_manager_testnet/build"
    # prepare environment and run tests
    - cd $CI_PROJECT_DIR/tests/integration/system/haf
    - pytest --junitxml report.xml
  artifacts:
    paths:
    - "**/generated_during_*"
    - "**/generated_by_package_fixtures"
    reports:
      junit: tests/integration/system/haf/report.xml
    when: always
    expire_in: 1 week
  interruptible: true
  tags:
    - public-runner-docker

applications_system_tests:
  stage: build_and_test_phase_2
  extends: .pytest_based
  needs:
    - job: hive_fork_manager_testnet
      artifacts: true
    - job: hived_testnet
      artifacts: true
  image: "$CI_REGISTRY_IMAGE/ci-base-image$BUILDER_IMAGE_TAG"
  variables:
    HIVE_BUILD_ROOT_PATH: "$CI_PROJECT_DIR/hived_testnet/build/hive"
  script:
    # install hive_fork_manager extension built in previous stage
    - sudo $SETUP_SCRIPTS_PATH/setup_postgres.sh --haf-admin-account=haf_admin --haf-database-store="$CI_PROJECT_DIR/haf_database_store" --haf-binaries-dir="$CI_PROJECT_DIR/hive_fork_manager_testnet/build"
    # prepare environment and run tests
    - cd $CI_PROJECT_DIR/tests/integration/system/applications
    - pytest --junitxml report.xml
  artifacts:
    paths:
    - "**/generated_during_*"
    - "**/generated_by_package_fixtures"
    reports:
      junit: tests/integration/system/haf/report.xml
    when: always
    expire_in: 1 week
  interruptible: true
  tags:
    - public-runner-docker

.replay_step:
  stage: build_and_test_phase_2
  needs:
    - job: hive_fork_manager
      artifacts: true
    - job: hived
      artifacts: true
  image: "$CI_REGISTRY_IMAGE/ci-base-image$BUILDER_IMAGE_TAG"
  variables:
    HIVE_BUILD_ROOT_PATH: "$CI_PROJECT_DIR/hived/build/hive"
    BLOCK_LOG_DIRECTORY: "/blockchain"
    DB_NAME: haf_block_log
    DB_URL: "postgresql:///$DB_NAME"
    DB_ADMIN: "haf_admin"
    REPLAY: "--force-replay"
  before_script:
    - !reference [.pytest_based, before_script]
    - sudo $SETUP_SCRIPTS_PATH/setup_postgres.sh --haf-admin-account=$DB_ADMIN --haf-binaries-dir="$CI_PROJECT_DIR/hive_fork_manager/build"
    - $SETUP_SCRIPTS_PATH/setup_db.sh --haf-db-name="$DB_NAME" --haf-app-user="haf_app_admin"
    # replay
    - test -n "$PATTERNS_PATH"
    - cd $CI_PROJECT_DIR/tests/integration/replay
    - mkdir $PATTERNS_PATH/blockchain
    - ls $HIVE_BUILD_ROOT_PATH/programs/util/ -lath
    - $HIVE_BUILD_ROOT_PATH/programs/util/compress_block_log --input-block-log $BLOCK_LOG_DIRECTORY --output-block-log $PATTERNS_PATH/blockchain --decompress --block-count 5000000
    - $HIVE_BUILD_ROOT_PATH/programs/hived/hived --data-dir $PATTERNS_PATH $REPLAY --exit-before-sync --psql-url $DB_URL 2>&1 | tee -i node_logs.log
  script:
    - pytest --junitxml report.xml
  artifacts:
    paths:
    - "**/node_logs.log"
    - "**/node_logs1.log"
    - "**/generated_during_*"
    - "**/generated_by_package_fixtures"
    - "**/*.out.csv"
    reports:
      junit: tests/integration/replay/report.xml
    when: always
    expire_in: 1 week
  interruptible: true
  tags:
    - public-runner-docker
    - hived-for-tests

replay_with_haf:
  extends: .replay_step
  variables:
    PATTERNS_PATH: "$CI_PROJECT_DIR/tests/integration/replay/patterns/no_filter"

replay_accounts_filtered_with_haf:
  extends: .replay_step
  variables:
    PATTERNS_PATH: "$CI_PROJECT_DIR/tests/integration/replay/patterns/accounts_filtered"

replay_accounts_operations_filtered_with_haf:
  extends: .replay_step
  variables:
    PATTERNS_PATH: "$CI_PROJECT_DIR/tests/integration/replay/patterns/accounts_operations_filtered"

replay_virtual_operations_filtered_with_haf:
  extends: .replay_step
  variables:
    PATTERNS_PATH: "$CI_PROJECT_DIR/tests/integration/replay/patterns/virtual_operations_filtered"

replay_operations_filtered_with_haf:
  extends: .replay_step
  variables:
    PATTERNS_PATH: "$CI_PROJECT_DIR/tests/integration/replay/patterns/operations_filtered"

replay_body_operations_filtered_with_haf:
  extends: .replay_step
  variables:
    PATTERNS_PATH: "$CI_PROJECT_DIR/tests/integration/replay/patterns/body_operations_filtered"

replay_accounts_body_operations_filtered_with_haf:
  extends: .replay_step
  variables:
    PATTERNS_PATH: "$CI_PROJECT_DIR/tests/integration/replay/patterns/accounts_body_operations_filtered"

replay_with_update:
  extends: .replay_step
  variables:
    PATTERNS_PATH: "$CI_PROJECT_DIR/tests/integration/replay/patterns/no_filter"
    REPLAY: "--replay-blockchain --stop-replay-at-block 1000000"
    REPLAY_CONTINUATION: "--replay-blockchain --stop-replay-at-block 2000000"
  script:
    # run script that makes database update
    - sudo $SETUP_SCRIPTS_PATH/ci-helpers/test_extension_update.sh --setup_scripts_path=$SETUP_SCRIPTS_PATH --haf_binaries_dir=$CI_PROJECT_DIR/$CI_JOB_NAME/build --ci_project_dir=$CI_PROJECT_DIR
    # repeat replay from 1 milion blocks
    - $HIVE_BUILD_ROOT_PATH/programs/hived/hived --data-dir $PATTERNS_PATH $REPLAY_CONTINUATION --exit-before-sync --psql-url $DB_URL 2>&1 | tee -i node_logs1.log
    # verify if upgrade is complete by calling the new added function
    - sudo -Enu $DB_ADMIN psql -w --host /var/run/postgresql --port 5432 -d $DB_NAME -v ON_ERROR_STOP=on -U $DB_ADMIN -c "SELECT hive.test()"

block_api_tests:
  extends: .replay_step
  variables:
    FF_NETWORK_PER_BUILD: 1
    SETUP_DIR: "$CI_PROJECT_DIR/setup_dir/"
    PATTERNS_PATH: "$CI_PROJECT_DIR/tests/integration/replay/patterns/accounts_body_operations_filtered"
    BENCHMARK_DIR: "$CI_PROJECT_DIR/tests/integration/haf-local-tools/tests_api/benchmarks"
  script:
    # setup
    - sudo apt update && sudo apt install -y bash git unzip wget ca-certificates curl build-essential python3-dev maven openjdk-8-jdk openjdk-8-jre python3 python3-pip
    - pip3 install prettytable
    - mkdir -p $SETUP_DIR && cd $SETUP_DIR
    - $BENCHMARK_DIR/setup_jmeter.bash && source jmeter/activate # sets env $JMETER
    - $BENCHMARK_DIR/setup_m2u.bash && source m2u/activate # sets env $M2U
    - $M2U || true
    - psql $DB_URL -c "CREATE ROLE bench LOGIN PASSWORD 'mark' INHERIT IN ROLE hived_group;"
    - export BENCHMARK_DB_URL="postgresql://bench:mark@localhost:5432/$DB_NAME"

    # run pattern tests
    - cd "$BENCHMARK_DIR"
    - python3 benchmark.py --loops 200 --threads 5 -n blocks_api -p 5432 -c perf_5M_light.csv --skip-version-check -j $JMETER -d wdir --postgres $BENCHMARK_DB_URL --call-style postgres 2>&1 | tee -i $CI_PROJECT_DIR/python_benchmark.log

    # generate JUNIT report file
    - $M2U --input "$BENCHMARK_DIR/wdir/raw_jmeter_report.xml" --output $CI_PROJECT_DIR/report.junit

  cache:
    # this will prevent re-downloading jmeter and m2u
    key: bench-tools
    paths:
      - "$SETUP_DIR/"

  artifacts:
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_NAME"
    reports:
      junit: $CI_PROJECT_DIR/report.junit
    paths:
      - $BENCHMARK_DIR/wdir
      - $CI_PROJECT_DIR/python_benchmark.log
    when: always
    expire_in: 1 week
  tags:
    - public-runner-docker
    - hived-for-tests

prepare_haf_image:
  extends: .prepare_haf_image
  stage: build_and_test_phase_1
  variables:
    REGISTRY_USER: "$CI_IMG_BUILDER_USER"
    REGISTRY_PASS: $CI_IMG_BUILDER_PASSWORD
    BINARY_CACHE_PATH: "haf-binaries"
    HIVE_NETWORK_TYPE: mainnet
  tags:
    - hive-builder-4

prepare_haf_data:
  extends: .prepare_haf_data_5m
  needs:
    - job: prepare_haf_image
      artifacts: true
  stage: build_and_test_phase_1
  variables:
    DATA_CACHE: $DATA_CACHE_MAINNET
    BLOCK_LOG_SOURCE_DIR: $BLOCK_LOG_SOURCE_DIR_5M
    CONFIG_INI_SOURCE: "$CI_PROJECT_DIR/docker/config_5M.ini"
  tags:
    - hive-builder-4
  resource_group: ${CI_COMMIT_SHA}

.haf-service: &haf-service
  name: $HAF_IMAGE_NAME
  alias: haf-instance
  variables:
    # Allow access from any network to eliminate CI IP addressing problems
    PG_ACCESS: "host    haf_block_log    haf_app_admin    0.0.0.0/0    trust"
    DATADIR: $DATA_CACHE/datadir
    SHM_DIR: $DATA_CACHE/shm_dir
    LOG_FILE: $CI_JOB_NAME.log
  command: ["--replay-blockchain", "--stop-replay-at-block=5000000"]

start_haf_as_service:
  stage: build_and_test_phase_2
  image: "$CI_REGISTRY_IMAGE/ci-base-image$BUILDER_IMAGE_TAG"
  needs:
    - job: prepare_haf_data
      artifacts: true
  services:
    - *haf-service
  variables:
    DATA_CACHE: $DATA_CACHE_MAINNET
    HAF_POSTGRES_URL: postgresql://haf_app_admin@haf-instance:5432/haf_block_log
    HIVED_UID: $HIVED_UID
  script:
    - curl -I haf-instance:8090 || (echo "error connecting to service hived-instance" && false)
    - |
        curl -XPOST -d '{
        "jsonrpc": "2.0",
        "method": "database_api.get_dynamic_global_properties",
        "params": {
        },
        "id": 2
        }' haf-instance:8090
  after_script:
    - rm docker_entrypoint.log -f
    - cp $DATA_CACHE/datadir/$CI_JOB_NAME-$CI_COMMIT_SHORT_SHA.log $CI_PROJECT_DIR/docker_entrypoint.log
  artifacts:
    paths:
    - docker_entrypoint.log
  tags:
    - hive-builder-4
  resource_group: ${CI_COMMIT_SHA}

cleanup_haf_cache_manual:
  extends: .cleanup_cache_manual
  stage: cleanup
  variables:
    CLEANUP_PATH_PATTERN: "/cache/replay_data_haf_*"
  resource_group: ${CI_COMMIT_SHA}
  tags:
    - hive-builder-4
