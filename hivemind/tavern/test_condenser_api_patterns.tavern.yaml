---
  test_name: Hivemind condenser_api.get_discussions_by_promoted patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_discussions_by_promoted
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_discussions_by_promoted"
          params: {"tag":"steem","limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_discussions_by_promoted"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_discussions_by_created patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_discussions_by_created
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_discussions_by_created"
          params: {"tag":"steem","limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_discussions_by_created"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_discussions_by_blog patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_discussions_by_blog
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_discussions_by_blog"
          params: {"tag":"steemit","start_author":"steemit","start_permlink":"firstpost","limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_discussions_by_blog"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_discussions_by_feed patterns test

  marks:
    - patterntest # can't find any params that would give nonempty results, tag is not a tag but account

  includes:
    - !include common.yaml

  stages:
    - name: get_discussions_by_feed
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_discussions_by_feed"
          params: {"tag":"steem","limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_discussions_by_feed"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_discussions_by_comments patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_discussions_by_comments
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_discussions_by_comments"
          params: {"start_author":"admin","start_permlink":"firstpost","limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_discussions_by_comments"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_discussions_by_comments unexpected keyword patterns test

  marks:
    - patterntest
    - failing
    - xfail # while this would be acceptable we should change it to invalid parameters over server error (code suggests we wanted to completely silence that, but rest passes is as generic error, old code was the same so...)

  includes:
    - !include common.yaml

  stages:
    - name: get_replies_by_last_update unexpected keyword 
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_discussions_by_comments"
          params: [{"author": "steemit"}]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_discussions_by_comments_unexpected_keyword"
            directory: "condenser_api_patterns"
            error_response: true

---
  test_name: Hivemind condenser_api.get_replies_by_last_update patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_replies_by_last_update
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_replies_by_last_update"
          params: ["admin","firstpost",1]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_replies_by_last_update"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_replies_by_last_update limit 100 patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_replies_by_last_update
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_replies_by_last_update"
          params: ["gtg","",100]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_replies_by_last_update_limit_100"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_replies_by_last_update no results patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_replies_by_last_update no results
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_replies_by_last_update"
          params: ["admin","non_existing_permlink",1]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_replies_by_last_update_no_results"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_replies_by_last_update over limit patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_replies_by_last_update over limit
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_replies_by_last_update"
          params: ["admin","non_existing_permlink",101]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_replies_by_last_update_over_limit"
            directory: "condenser_api_patterns"
            error_response: true

---
  test_name: Hivemind condenser_api.get_replies_by_last_update blank start author patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_replies_by_last_update blank start author
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_replies_by_last_update"
          params: ["","non_existing_permlink",1]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_replies_by_last_update_blank_start_author"
            directory: "condenser_api_patterns"
            error_response: true

---
  test_name: Hivemind condenser_api.get_replies_by_last_update invalid account name length patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_replies_by_last_update invalid account name length
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_replies_by_last_update"
          params: ["a","non_existing_permlink",1]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_replies_by_last_update_invalid_account_name"
            directory: "condenser_api_patterns"
            error_response: true
            
---
  test_name: Hivemind condenser_api.get_discussions_by_author_before_date patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_discussions_by_author_before_date
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_discussions_by_author_before_date"
          params: {"author":"steemit","start_permlink":"firstpost","before_date":"2016-04-19T22:49:43","limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_discussions_by_author_before_date"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_discussions_by_author_before_date patterns test

  marks:
    - patterntest # should return empty set - no posts before 2009 (to be investigated but works like original)

  includes:
    - !include common.yaml

  stages:
    - name: get_discussions_by_author_before_date_no_results
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_discussions_by_author_before_date"
          params: {"author":"steemit","start_permlink":"firstpost","before_date":"2009-04-19T22:49:43","limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_discussions_by_author_before_date_no_results"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_discussions_by_author_before_date over limit patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_discussions_by_author over limit
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_discussions_by_author_before_date"
          params: {"author":"steemit","start_permlink":"firstpost","before_date":"2009-04-19T22:49:43","limit":101}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_discussions_by_author_before_date_over_limit"
            directory: "condenser_api_patterns"
            error_response: true

---
  test_name: Hivemind condenser_api.get_post_discussions_by_payout patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_post_discussions_by_payout
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_post_discussions_by_payout"
          params: {"tag":"polska","limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_post_discussions_by_payout"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_post_discussions_by_payout limit 20 test

  marks:
    - patterntest # differences in pending payout make it incomparable with original (also order of comments with the same payout was basically random)
    - failing
    - xfail # extra vote comes from the lack of muting functionality

  includes:
    - !include common.yaml

  stages:
    - name: get_post_discussions_by_payout limit 20
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_post_discussions_by_payout"
          params: {"tag":"test","limit":20}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_post_discussions_by_payout_limit_20"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_post_discussions_by_payout no results test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_post_discussions_by_payout no results
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_post_discussions_by_payout"
          params: {"tag":"non_existing_tag","limit":20}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_post_discussions_by_payout_no_results"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_post_discussions_by_payout over limit test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_post_discussions_by_payout over limit
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_post_discussions_by_payout"
          params: {"tag":"tag","limit":101}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_post_discussions_by_payout_over_limit"
            directory: "condenser_api_patterns"
            error_response: true

---
  test_name: Hivemind condenser_api.get_comment_discussions_by_payout patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_comment_discussions_by_payout
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_comment_discussions_by_payout"
          params: {"tag":"polska","limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_comment_discussions_by_payout"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_comment_discussions_by_payout limit 100 test

  marks:
    - patterntest # differences in pending payout make it incomparable with original (also order of comments with the same payout was basically random)

  includes:
    - !include common.yaml

  stages:
    - name: get_comment_discussions_by_payout limit 100
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_comment_discussions_by_payout"
          params: {"tag":"test","limit":100}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_comment_discussions_by_payout_limit_100"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_comment_discussions_by_payout no results test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_comment_discussions_by_payout no results
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_comment_discussions_by_payout"
          params: {"tag":"non_existing_tag","limit":100}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_comment_discussions_by_payout_no_results"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_comment_discussions_by_payout over limit test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_comment_discussions_by_payout over limit
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_comment_discussions_by_payout"
          params: {"tag":"tag","limit":101}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_comment_discussions_by_payout_over_limit"
            directory: "condenser_api_patterns"
            error_response: true

---
  test_name: Hivemind condenser_api.get_blog_entries patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_blog_entries
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_blog_entries"
          params: {"account":"steemit","start_entry_id":0,"limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_blog_entries"
            directory: "condenser_api_patterns"

---
  #should return reputation based on fat node, now is 0
  test_name: Hivemind condenser_api.get_account_reputations patterns test

  marks:
    - patterntest # fat node gives different answer (not only nonzero reputation but also json is generally different)

  includes:
    - !include common.yaml

  stages:
    - name: get_account_reputations
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_account_reputations"
          params: ["steemit", 1]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_account_reputations"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_reblogged_by patterns test

  marks:
    - patterntest
    - failing
    - xfail # reblogging does not work properly

  includes:
    - !include common.yaml

  stages:
    - name: get_reblogged_by
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_reblogged_by"
          params: {"author":"skypilot","permlink":"melting-rock"}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_reblogged_by"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_active_votes patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_active_votes
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_active_votes"
          params: ["biophil","test"]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_active_votes"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind deprecated condenser_api.get_account_votes 

  marks:
    - patterntest # we should probably change response to link to hive instead of steemit

  includes:
    - !include common.yaml

  stages:
    - name: get_account_votes deprecated
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_account_votes"
          params: ["steemit"]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_account_votes_deprecated"
            directory: "condenser_api_patterns"
            error_response: true
