---
  test_name: Hivemind condenser_api.get_followers patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_followers
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_followers"
          params: ["steemit",null,"blog",10]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_followers"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_following patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_following
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_following"
          params: ["proskynneo",null,"blog",10]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_following"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_follow_count patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_follow_count
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_follow_count"
          params: ["steemit"]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_follow_count"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_content patterns test

  marks:
    - patterntest
    - failing
    - xfail

  includes:
    - !include common.yaml

  stages:
    - name: get_content
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_content"
          params: ["steemit", "firstpost"]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_content"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_content_replies patterns test

  marks:
    - patterntest
    - failing
    - xfail

  includes:
    - !include common.yaml

  stages:
    - name: get_content_replies
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_content_replies"
          params: ["gtg", "hello-world"]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_content_replies"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_state patterns test

  marks:
    - patterntest
    - failing
    - xfail

  includes:
    - !include common.yaml

  stages:
    - name: get_state
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_state"
          params: ["/@steemit"]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_state"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_trending_tags patterns test

  marks:
    - patterntest
    - failing
    - xfail # some tags have too many comments/top_posts, influences total_payouts (problem when post is deleted and recreated); once that is fixed rest of total_payouts can be slightly different

  includes:
    - !include common.yaml

  stages:
    - name: get_trending_tags
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_trending_tags"
          params: ["steem",10]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_trending_tags"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_discussions_by_trending patterns test

  marks:
    - patterntest
    - failing
    - xfail # totally different post

  includes:
    - !include common.yaml

  stages:
    - name: get_discussions_by_trending
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_discussions_by_trending"
          params: {"tag":"steem","limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_discussions_by_trending"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_discussions_by_hot patterns test

  marks:
    - patterntest
    - failing
    - xfail # totally different post

  includes:
    - !include common.yaml

  stages:
    - name: get_discussions_by_hot
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_discussions_by_hot"
          params: {"tag":"steem","limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_discussions_by_hot"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_discussions_by_promoted patterns test

  marks:
    - patterntest
    - failing
    - xfail

  includes:
    - !include common.yaml

  stages:
    - name: get_discussions_by_promoted
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_discussions_by_promoted"
          params: {"tag":"steem","limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_discussions_by_promoted"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_discussions_by_created patterns test

  marks:
    - patterntest
    - failing
    - xfail

  includes:
    - !include common.yaml

  stages:
    - name: get_discussions_by_created
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_discussions_by_created"
          params: {"tag":"steem","limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_discussions_by_created"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_discussions_by_blog patterns test

  marks:
    - patterntest
    - failing
    - xfail # null result (super slow query response)

  includes:
    - !include common.yaml

  stages:
    - name: get_discussions_by_blog
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_discussions_by_blog"
          params: {"tag":"steemit","start_author":"steemit","start_permlink":"firstpost","limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_discussions_by_blog"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_discussions_by_feed patterns test

  marks:
    - patterntest # can't find any params that would give nonempty results

  includes:
    - !include common.yaml

  stages:
    - name: get_discussions_by_feed
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_discussions_by_feed"
          params: {"tag":"steem","limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_discussions_by_feed"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_discussions_by_comments patterns test

  marks:
    - patterntest
    - failing
    - xfail

  includes:
    - !include common.yaml

  stages:
    - name: get_discussions_by_comments
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_discussions_by_comments"
          params: {"start_author":"admin","start_permlink":"firstpost","limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_discussions_by_comments"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_replies_by_last_update patterns test

  marks:
    - patterntest
    - failing
    - xfail

  includes:
    - !include common.yaml

  stages:
    - name: get_replies_by_last_update
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_replies_by_last_update"
          params: ["admin","firstpost",1]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_replies_by_last_update"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_discussions_by_author_before_date patterns test

  marks:
    - patterntest
    - failing
    - xfail

  includes:
    - !include common.yaml

  stages:
    - name: get_discussions_by_author_before_date
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_discussions_by_author_before_date"
          params: {"author":"steemit","start_permlink":"firstpost","before_date":"2016-04-19T22:49:43","limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_discussions_by_author_before_date"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_post_discussions_by_payout patterns test

  marks:
    - patterntest
    - failing
    - xfail

  includes:
    - !include common.yaml

  stages:
    - name: get_post_discussions_by_payout
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_post_discussions_by_payout"
          params: {"tag":"polska","limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_post_discussions_by_payout"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_comment_discussions_by_payout patterns test

  marks:
    - patterntest
    - failing
    - xfail

  includes:
    - !include common.yaml

  stages:
    - name: get_comment_discussions_by_payout
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_comment_discussions_by_payout"
          params: {"tag":"polska","limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_comment_discussions_by_payout"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_blog patterns test

  marks:
    - patterntest
    - failing
    - xfail

  includes:
    - !include common.yaml

  stages:
    - name: get_blog
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_blog"
          params: {"account":"steemit","start_entry_id":0,"limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_blog"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_blog_entries patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_blog_entries
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_blog_entries"
          params: {"account":"steemit","start_entry_id":0,"limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_blog_entries"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_account_reputations patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_account_reputations
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_account_reputations"
          params: ["steemit", 1]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_account_reputations"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_reblogged_by patterns test

  marks:
    - patterntest # result is empty because reblogging functionality started past 5mln blocks

  includes:
    - !include common.yaml

  stages:
    - name: get_reblogged_by
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_reblogged_by"
          params: {"author":"steemit","permlink":"firstpost"}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_reblogged_by"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_accounts patterns test

  marks:
    - patterntest
    - failing
    - xfail

  includes:
    - !include common.yaml

  stages:
    - name: get_accounts
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_accounts"
          params: ["steemit"]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_accounts"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_active_votes patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_active_votes
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_active_votes"
          params: ["biophil","test"]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_active_votes"
            directory: "condenser_api_patterns"