---
  test_name: Hivemind condenser_api.get_followers patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_followers
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_followers"
          params: ["steemit",null,"blog",10]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_followers"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_followers last patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_followers last
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_followers"
          params: ["steemit","fjccoin","blog",1000]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_followers_last"
            directory: "condenser_api_patterns"
---
  test_name: Hivemind condenser_api.get_followers ignore type patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_followers ignore type
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_followers"
          params: ["steemit",null,"ignore",100]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_followers_ignore"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_followers no followers patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_followers no followers
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_followers"
          params: ["test2",null,"blog",1000]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_followers_no_followers"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_followers over limit test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_followers over limit
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_followers"
          params: ["steemit",null,"blog",1001]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_followers_over_limit"
            directory: "condenser_api_patterns"
            error_response: true
---
  test_name: Hivemind condenser_api.get_followers wrong_type patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_followers wrong type
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_followers"
          params: ["brightnesssoulds",null,"wrong_type",1000]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_followers_wrong_type"
            directory: "condenser_api_patterns"
            error_response: true

---
  test_name: Hivemind condenser_api.get_following patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_following
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_following"
          params: ["proskynneo",null,"blog",10]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_following"
            directory: "condenser_api_patterns"
---
  test_name: Hivemind condenser_api.get_following last patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_following last
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_following"
          params: ["gtg","blocktrades","blog",1000]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_following_last"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_following no following patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_following no following
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_following"
          params: ["test2",null,"blog",1000]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_following_no_following"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_following ignore_type patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_following ignore_type
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_following"
          params: ["brightnesssoulds",null,"ignore",1000]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_following_ignore"
            directory: "condenser_api_patterns"
---
  test_name: Hivemind condenser_api.get_following wrong_type patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_following wrong_type
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_following"
          params: ["brightnesssoulds",null,"wrong_type",1000]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_following_wrong_type"
            directory: "condenser_api_patterns"
            error_response: true
---
  test_name: Hivemind condenser_api.get_following over limit test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_following last
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_following"
          params: ["gtg","blocktrades","blog",1001]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_following_over_limit"
            directory: "condenser_api_patterns"
            error_response: true

---
  test_name: Hivemind condenser_api.get_follow_count patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_follow_count
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_follow_count"
          params: ["steemit"]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_follow_count"
            directory: "condenser_api_patterns"
---
  test_name: Hivemind condenser_api.get_follow_count following and followers patterns test

  marks:
    - patterntest 

  includes:
    - !include common.yaml

  stages:
    - name: get_follow_count following and followers 
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_follow_count"
          params: ["gtg"]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_follow_count_following_and_followers"
            directory: "condenser_api_patterns"
---
  test_name: Hivemind condenser_api.get_follow_count_no_followers patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_follow_count
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_follow_count"
          params: ["test2"]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_follow_count_no_followers"
            directory: "condenser_api_patterns"
---
  test_name: Hivemind condenser_api.get_content patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_content
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_content"
          params: ["steemit", "firstpost"]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_content"
            directory: "condenser_api_patterns"
---
  test_name: Hivemind condenser_api.get_content gtg patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_content gtg
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_content"
          params: ["gtg", "witness-gtg"]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_content_gtg"
            directory: "condenser_api_patterns"
---
  test_name: Hivemind condenser_api.get_content deleted post patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_content gtg
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_content"
          params: ["jsc", "testing-summary"]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_content_deleted"
            directory: "condenser_api_patterns"
            error_response: true
---
  test_name: Hivemind condenser_api.get_content_replies patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_content_replies
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_content_replies"
          params: ["gtg", "hello-world"]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_content_replies"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_state patterns test # Deprecated

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_state
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_state"
          params: ["/@steemit"]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_state"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_trending_tags patterns test

  marks:
    - patterntest
    - failing
    - xfail # some tags have too many comments/top_posts, influences total_payouts (problem when post is deleted and recreated); once that is fixed rest of total_payouts can be slightly different

  includes:
    - !include common.yaml

  stages:
    - name: get_trending_tags
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_trending_tags"
          params: ["steem",10]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_trending_tags"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_trending_tags limit 250 patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_trending_tags limit 250
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_trending_tags"
          params: {"start_tag": "dream","limit":250}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_trending_tags_limit_250"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_trending_tags over limit patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_trending_tags limit 250
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_trending_tags"
          params: {"start_tag": "dream","limit":251}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_followers_trending_tags_over_limit"
            directory: "condenser_api_patterns"
            error_response: true
---
  test_name: Hivemind condenser_api.get_discussions_by_trending patterns test

  marks:
    - patterntest
    - failing
    - xfail # totally different post

  includes:
    - !include common.yaml

  stages:
    - name: get_discussions_by_trending
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_discussions_by_trending"
          params: {"tag":"steem","limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_discussions_by_trending"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_discussions_by_hot patterns test

  marks:
    - patterntest
    - failing
    - xfail # totally different post

  includes:
    - !include common.yaml

  stages:
    - name: get_discussions_by_hot
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_discussions_by_hot"
          params: {"tag":"steem","limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_discussions_by_hot"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_discussions_by_promoted patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_discussions_by_promoted
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_discussions_by_promoted"
          params: {"tag":"steem","limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_discussions_by_promoted"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_discussions_by_created patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_discussions_by_created
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_discussions_by_created"
          params: {"tag":"steem","limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_discussions_by_created"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_discussions_by_blog patterns test

  marks:
    - patterntest
    - failing
    - xfail # null result (super slow query response)

  includes:
    - !include common.yaml

  stages:
    - name: get_discussions_by_blog
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_discussions_by_blog"
          params: {"tag":"steemit","start_author":"steemit","start_permlink":"firstpost","limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_discussions_by_blog"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_discussions_by_feed patterns test

  marks:
    - patterntest # can't find any params that would give nonempty results, tag is not a tag but account

  includes:
    - !include common.yaml

  stages:
    - name: get_discussions_by_feed
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_discussions_by_feed"
          params: {"tag":"steem","limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_discussions_by_feed"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_discussions_by_comments patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_discussions_by_comments
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_discussions_by_comments"
          params: {"start_author":"admin","start_permlink":"firstpost","limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_discussions_by_comments"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_discussions_by_comments unexpected keyword patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_replies_by_last_update unexpected keyword 
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_discussions_by_comments"
          params: [{"author": "steemit"}]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_discussions_by_comments_unexpected_keyword"
            directory: "condenser_api_patterns"
            error_response: true

---
  test_name: Hivemind condenser_api.get_replies_by_last_update patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_replies_by_last_update
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_replies_by_last_update"
          params: ["admin","firstpost",1]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_replies_by_last_update"
            directory: "condenser_api_patterns"
---
  test_name: Hivemind condenser_api.get_replies_by_last_update limit 100 patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_replies_by_last_update
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_replies_by_last_update"
          params: ["gtg","",100]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_replies_by_last_update_limit_100"
            directory: "condenser_api_patterns"
---
  test_name: Hivemind condenser_api.get_replies_by_last_update no results patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_replies_by_last_update no results
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_replies_by_last_update"
          params: ["admin","non_existing_permlink",1]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_replies_by_last_update_no_results"
            directory: "condenser_api_patterns"
---
  test_name: Hivemind condenser_api.get_replies_by_last_update over limit patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_replies_by_last_update over limit
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_replies_by_last_update"
          params: ["admin","non_existing_permlink",101]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_replies_by_last_update_over_limit"
            directory: "condenser_api_patterns"
            error_response: true
---
  test_name: Hivemind condenser_api.get_replies_by_last_update blank start author patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_replies_by_last_update blank start author
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_replies_by_last_update"
          params: ["","non_existing_permlink",1]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_replies_by_last_update_blank_start_author"
            directory: "condenser_api_patterns"
            error_response: true

---
  test_name: Hivemind condenser_api.get_replies_by_last_update invalid account name length patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_replies_by_last_update invalid account name length
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_replies_by_last_update"
          params: ["a","non_existing_permlink",1]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_replies_by_last_update_invalid_account_name"
            directory: "condenser_api_patterns"
            error_response: true
            
---
  test_name: Hivemind condenser_api.get_discussions_by_author_before_date patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_discussions_by_author_before_date
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_discussions_by_author_before_date"
          params: {"author":"steemit","start_permlink":"firstpost","before_date":"2016-04-19T22:49:43","limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_discussions_by_author_before_date"
            directory: "condenser_api_patterns"
---
  test_name: Hivemind condenser_api.get_discussions_by_author_before_date patterns test

  marks:
    - patterntest
    - xfail # should return empty set - no posts before 2009
    - failing

  includes:
    - !include common.yaml

  stages:
    - name: get_discussions_by_author_before_date_no_results
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_discussions_by_author_before_date"
          params: {"author":"steemit","start_permlink":"firstpost","before_date":"2009-04-19T22:49:43","limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_discussions_by_author_before_date_no_results"
            directory: "condenser_api_patterns"
---
  test_name: Hivemind condenser_api.get_discussions_by_author_before_date over limit patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_discussions_by_author over limit
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_discussions_by_author_before_date"
          params: {"author":"steemit","start_permlink":"firstpost","before_date":"2009-04-19T22:49:43","limit":101}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_discussions_by_author_before_date_over_limit"
            directory: "condenser_api_patterns"
            error_response: true
---
  test_name: Hivemind condenser_api.get_post_discussions_by_payout patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_post_discussions_by_payout
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_post_discussions_by_payout"
          params: {"tag":"polska","limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_post_discussions_by_payout"
            directory: "condenser_api_patterns"
---
  test_name: Hivemind condenser_api.get_post_discussions_by_payout limit 20 test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_post_discussions_by_payout limit 20
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_post_discussions_by_payout"
          params: {"tag":"test","limit":20}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_post_discussions_by_payout_limit_20"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_post_discussions_by_payout no results test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_post_discussions_by_payout no results
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_post_discussions_by_payout"
          params: {"tag":"non_existing_tag","limit":20}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_post_discussions_by_payout_no_results"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_post_discussions_by_payout over limit test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_post_discussions_by_payout over limit
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_post_discussions_by_payout"
          params: {"tag":"tag","limit":101}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_post_discussions_by_payout_over_limit"
            directory: "condenser_api_patterns"
            error_response: true

---
  test_name: Hivemind condenser_api.get_comment_discussions_by_payout patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_comment_discussions_by_payout
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_comment_discussions_by_payout"
          params: {"tag":"polska","limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_comment_discussions_by_payout"
            directory: "condenser_api_patterns"
---
  test_name: Hivemind condenser_api.get_comment_discussions_by_payout limit 100 test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_comment_discussions_by_payout limit 100
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_comment_discussions_by_payout"
          params: {"tag":"test","limit":100}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_comment_discussions_by_payout_limit_100"
            directory: "condenser_api_patterns"
---
  test_name: Hivemind condenser_api.get_comment_discussions_by_payout no results test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_comment_discussions_by_payout no results
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_comment_discussions_by_payout"
          params: {"tag":"non_existing_tag","limit":100}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_comment_discussions_by_payout_no_results"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_comment_discussions_by_payout over limit test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_comment_discussions_by_payout over limit
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_comment_discussions_by_payout"
          params: {"tag":"tag","limit":101}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_comment_discussions_by_payout_over_limit"
            directory: "condenser_api_patterns"
            error_response: true

---
  test_name: Hivemind condenser_api.get_blog patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_blog
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_blog"
          params: {"account":"steemit","start_entry_id":0,"limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_blog"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_blog invalid limit combination patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml
    # strange error - when limit exceeds the number of posts written by user it should return all posts - not error
  stages:
    - name: get_blog invalid limit combination
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_blog"
          params: {"account":"gtg","start_entry_id":11,"limit":20}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_blog_invalid_limit"
            directory: "condenser_api_patterns"
            error_response: true
            
---
  test_name: Hivemind condenser_api.get_blog limit 100 patterns test

  marks:
    - patterntest
    - xfail # test should return all steemit account posts, issue: https://gitlab.syncad.com/hive/hivemind/-/issues/53
    - failing

  includes:
    - !include common.yaml

  stages:
    - name: get_blog limit 100
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_blog"
          params: {"account":"steemit","start_entry_id":0,"limit":100}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_blog_limit_100"
            directory: "condenser_api_patterns"
---
  test_name: Hivemind condenser_api.get_blog no results test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_blog no results
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_blog"
          params: {"account":"user","start_entry_id":0,"limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_blog_no_results"
            directory: "condenser_api_patterns"
---
  test_name: Hivemind condenser_api.get_blog over limit test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_blog over limit
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_blog"
          params: {"account":"steemit","start_entry_id":0,"limit":501}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_blog_over_limit"
            directory: "condenser_api_patterns"
            error_response: true
---
  test_name: Hivemind condenser_api.get_blog non existing account test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_blog non existing account
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_blog"
          params: {"account":"non.existing","start_entry_id":0,"limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_blog_non_existing"
            directory: "condenser_api_patterns"
            error_response: true
---
  test_name: Hivemind condenser_api.get_blog too long account name test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_blog too long account name
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_blog"
          params: {"account":"too.long.account.name","start_entry_id":0,"limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_blog_too_long_account_name"
            directory: "condenser_api_patterns"
            error_response: true
---
  test_name: Hivemind condenser_api.get_blog invalid account test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_blog invalid account
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_blog"
          params: {"account":"invalid_account","start_entry_id":0,"limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_blog_invalid_account_char"
            directory: "condenser_api_patterns"
            error_response: true
---
  test_name: Hivemind condenser_api.get_blog_entries patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_blog_entries
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_blog_entries"
          params: {"account":"steemit","start_entry_id":0,"limit":1}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_blog_entries"
            directory: "condenser_api_patterns"

---
  #should return reputation based on fat node, now is 0
  test_name: Hivemind condenser_api.get_account_reputations patterns test

  marks:
    - patterntest # to be changed for account that has some reputation

  includes:
    - !include common.yaml

  stages:
    - name: get_account_reputations
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_account_reputations"
          params: ["steemit", 1]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_account_reputations"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_reblogged_by patterns test

  marks:
    - patterntest # result is empty because reblogging functionality started past 5mln blocks

  includes:
    - !include common.yaml

  stages:
    - name: get_reblogged_by
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_reblogged_by"
          params: {"author":"steemit","permlink":"firstpost"}
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_reblogged_by"
            directory: "condenser_api_patterns"

---
  test_name: Hivemind condenser_api.get_active_votes patterns test

  marks:
    - patterntest
    - failing
    - xfail # percent/time wrong for vote with rshares=0 (possibly same problem as in edited votes)

  includes:
    - !include common.yaml

  stages:
    - name: get_active_votes
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_active_votes"
          params: ["biophil","test"]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_active_votes"
            directory: "condenser_api_patterns"
---
  test_name: Hivemind deprecated condenser_api.get_account_votes 

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_account_votes deprecated
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_account_votes"
          params: ["steemit"]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_account_votes_deprecated"
            directory: "condenser_api_patterns"
            error_response: true
---
  # get_accounts should be based on fat node - posting_rewards and reputations are 0 on AH node
  test_name: Hivemind condenser_api.get_accounts with single account patterns test

  marks:
    - patterntest
    - failing
    - xfail # server error (to be investigated)

  includes:
    - !include common.yaml

  stages:
    - name: get_accounts
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_accounts"
          params: [["steemit"]]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_accounts"
            directory: "condenser_api_patterns"
---
  test_name: Hivemind condenser_api.get_accounts with multiple accounts patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_accounts with multiple accounts
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_accounts"
          params: [["steemit","biophil","test"]]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_multiple_accounts"
            directory: "condenser_api_patterns"
---
  test_name: Hivemind condenser_api.get_accounts with non existing account patterns test

  marks:
    - patterntest

  includes:
    - !include common.yaml

  stages:
    - name: get_accounts with non existing account
      request:
        url: "{service.proto:s}://{service.server:s}:{service.port}/"
        method: POST
        headers:
          content-type: application/json
        json:
          jsonrpc: "2.0"
          id: 1
          method: "condenser_api.get_accounts"
          params: [["nalesnik"]]
      response:
        status_code: 200
        verify_response_with:
          function: validate_response:compare_response_with_pattern
          extra_kwargs:
            method: "get_non_existing_accounts"
            directory: "condenser_api_patterns"
